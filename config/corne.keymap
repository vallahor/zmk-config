/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT
#define NUMBER
#define SYMBOL
#define NAVIGATION

/ {
        keymap {
                compatible = "zmk,behavior-hold-tap";
                // compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// | none |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | none |
// | none |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  | none |
// | none |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | none |
// | TAB / Number | SPC / Symbol | LGUI |   | BSPC | ESC / SHIFT  | RET / NAVIGATION |
                        bindings = <
   &none &kp Q      &kp W      &kp E       &kp R        &kp T      &kp Y    &mt LSHIFT I   &mt LCTRL I &mt LALT O &mt LGUI P &none
   &none &mt LGUI A &mt LALT S &mt LCTRL D &mt LSHIFT F &kp G      &kp H    &kp J          &kp K       &kp L      &kp SEMI   &none
   &none &kp Z      &kp X      &kp C       &kp V        &kp B      &kp N    &kp M          &kp COMMA   &kp DOT    &kp FSLH   &none
                  &lt NUMBER TAB   &lt SYMBOL SPACE  &kp LGUI      &kp BSPC &mt LSHIFT ESC &lt NAVIGATION RET
                        >;
                };

                number_layer {
// -----------------------------------------------------------------------------------------
// |      |  F1  |  F2  |  F3  |  F4  |     |   |  *  |  7  |  8  |  9  |  .  |      |
// |      |  F5  |  F6  |  F7  |  F8  |     |   |  +  |  4  |  5  |  6  |  ,  |      |
// |      |  F9  |  F10 |  F11 |  F12 |     |   |  -  |  1  |  2  |  3  |  /  |      |
//                        |     |     |     |   | RET |  0  | SPACE |
                        bindings = <
   &none &kp F1 &kp F2  &kp F3  &kp F4  &trans   &kp ASTRK &kp N7 &kp N8 &kp N9 &kp DOT   &none
   &none &kp F5 &kp F6  &kp F7  &kp F8  &trans   &kp PLUS  &kp N4 &kp N5 &kp N6 &kp COMMA &none
   &none &kp F9 &kp F10 &kp F11 &kp F12 &trans   &kp MINUS &kp N1 &kp N2 &kp N3 &kp FSLH  &none
                        &trans  &trans  &trans   &kp RET   &kp N0 &kp SPACE
                        >;
                };

                symbol_layer {
// -----------------------------------------------------------------------------------------
// |      |  !  |  @  |  #  |  $  |  \  |   |  '  |  [  |  (  |  )  |  ]  |      |
// |      |  %  |  ^  |  &  |  *  |  `  |   |  "  |  _  |  {  |  }  |  :  |      |
// |      |     |  ~  |  -  |  +  |     |   | "|" |  =  |  <  |  >  |  ?  |      |
//                    |     |     |     |   |     |     |     |
                        bindings = <
   &none &kp EXCL  &kp AT    &kp HASH  &kp DLLR  &kp BSLH    &kp SQT  &kp LBKT  &kp LPAR &kp RPAR &kp RBKT  &none
   &none &kp PRCNT &kp CARET &kp AMPS  &kp ASTRK &kp GRAVE   &kp DQT  &kp UNDER &kp LBRC &kp RBRC &kp COLON &none
   &none &trans    &kp TILDE &kp MINUS &kp PLUS  &trans      &kp PIPE &kp EQUAL &kp LT   &kp GT   &kp QMARK &none
                      &trans    &trans    &trans &trans      &trans   &trans
                        >;
                };

                navigation_layer {
// -----------------------------------------------------------------------------------------
// |      |     |     |     |     |     |   |  COPY  |  HOME    |  UP    |  END    |  PASTE   |      |
// |      |     |     |     |     |     |   |  PG UP |  LEFT    |  DOWN  |  RIGHT  |  PG DOWN |      |
// |      |     |     |     |     |     |   |  CUT   |  C_BSCP  |  BSCP  |  DEL    |  C_DEL   |      |
//                    |     |     |     |   |        |          |        |
                        bindings = <
   &none &trans &trans &trans &trans &trans   &kp K_COPY &kp HOME     &kp UP   &kp END   &kp K_PASTE &none
   &none &trans &trans &trans &trans &trans   &kp PG_UP  &kp LEFT     &kp DOWN &kp RIGHT &PG_DOWN    &none
   &none &trans &trans &trans &trans &trans   &kp K_CUT  &kp LC(BSCP) &kp BSCP &kp DEL   &kp LC(DEL) &none
                       &trans &trans &trans   &trans     &trans       &trans
                        >;
                };
        };
};
