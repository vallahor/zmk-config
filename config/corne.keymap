/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        esc_combo {
            bindings = <&kp ESCAPE>;
            key-positions = <19 20>;
            layers = <0>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <21 20 19>;
            layers = <0>;
            timeout-ms = <100>;
        };
    };

    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
&none  &kp Q              &kp W  &kp E  &kp R      &kp T        &kp Y          &kp U  &kp I           &kp O    &kp P                   &none
&none  &kp A       &kp S  &kp D  &kp F      &kp G        &kp H          &kp J  &kp K           &kp L    &kp SEMICOLON    &none
&none  &kp Z  &kp X  &kp C  &kp V      &kp B        &kp N          &kp M  &kp COMMA       &kp DOT  &kp SLASH  &none
                                 &mo 2  &kp SPACE  &kp LEFT_SHIFT    &kp BACKSPACE  &mo 1  &kp  LCTRL
            >;
        };

        sym_layer {
            bindings = <
&none  &kp EXCLAMATION  &kp AT_SIGN       &kp AMPERSAND      &kp ASTERISK  &kp CARET           &kp GRAVE      &kp DOUBLE_QUOTES  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PERCENT   &none
&none  &kp HASH         &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp EQUAL     &kp SINGLE_QUOTE    &none          &kp UNDERSCORE     &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp COLON     &none
&none  &kp TILDE        &kp MINUS         &kp PLUS           &kp DOLLAR    &none               &kp BACKSLASH  &kp PIPE           &kp LESS_THAN         &kp GREATER_THAN       &kp QUESTION  &none
                                          &trans             &trans        &trans              &trans         &trans             &trans
            >;
        };

        nav_layer {
            bindings = <
&none  &kp N1     &kp N2      &kp N3        &kp N4     &kp N5        &kp N6             &kp N7    &kp N8        &kp N9      &kp N0         &none
&none  &kp LCTRL  &kp LSHIFT  &kp LEFT_ALT  &kp TAB    &kp ESCAPE    &kp LEFT           &kp DOWN  &kp UP        &kp RIGHT   &kp PG_UP      &none
&none  &kp LC(Z)  &kp LC(X)   &kp LC(C)     &kp LC(V)  &trans        &kp BACKSPACE      &kp HOME  &kp END       &kp DELETE  &kp PAGE_DOWN  &none
                              &trans        &trans     &trans        &kp LC(BACKSPACE)  &trans    &kp LEFT_GUI
            >;
        };

        fn_layer {
            bindings = <
&none  &kp F1   &kp F2   &kp F3  &kp F4  &kp F5     &none           &none              &none             &none       &none            &none
&none  &kp F6   &kp F7   &kp F8  &kp F9  &kp F10    &kp C_PREVIOUS  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP   &kp C_NEXT  &kp PRINTSCREEN  &none
&none  &kp F11  &kp F12  &none   &none   &none      &none           &kp C_MUTE         &kp C_PLAY_PAUSE  &none       &none            &none
                         &none   &none   &none      &none           &none              &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        fn_layer_cond {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
