/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <200>;
            bindings = <&kp>, <&kp>;

            label = "HMR";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29>;
        };

        caps_word: caps_word {
            compatible = "zmk,behavior-caps-word";
            label = "CAPS_WORD";
            #binding-cells = <0>;
            continue-list = <UNDERSCORE>;
        };
    };

    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESC>;
            key-positions = <19 20>; // jk
            timeout-ms = <50>;
            layers = <0>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <31 32>;
            timeout-ms = <50>;
            layers = <0>;
        };

        delete {
            bindings = <&kp DEL>;
            key-positions = <32 33>;
            timeout-ms = <50>;
            layers = <0>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <20 21>;
            timeout-ms = <50>;
            layers = <0 2>;
        };

        caps_word_toggle {
            bindings = <&caps_word>;
            key-positions = <19 21>;
            timeout-ms = <50>;
            layers = <0>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <15 16>;
            timeout-ms = <50>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            // -----------------------------------------------------------------------------------------
            // | none |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | none |
            // | none |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  | none |
            // | none |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | none |
            // | TAB / Number | SPC / Symbol | none |   | none | NAVIGATION | SHIFT |

            bindings = <
&none  &kp Q  &kp W        &kp E         &kp R          &kp T    &kp Y  &kp U              &kp I                &kp O            &kp P     &none
&none  &kp A  &hmr LALT S  &hmr LCTRL D  &hmr LSHIFT F  &kp G    &kp H  &hmr LEFT_SHIFT J  &hmr LEFT_CONTROL K  &hmr LEFT_ALT L  &kp SEMI  &none
&none  &kp Z  &kp X        &kp C         &kp V          &kp B    &kp N  &kp M              &kp COMMA            &kp DOT          &kp FSLH  &none
                           &kp LSHIFT    &lt 2 SPACE    &none    &none  &mo 1              &kp LEFT_GUI
            >;
        };

        sym_layer {
            // -----------------------------------------------------------------------------------------
            // |      |  '  | "|" |  !  |  "  |  `  |   |  ^  |  [  |  (  |  )  |  ]  |      |
            // |      |  #  |  @  |  &  |  *  |  $  |   |  %  |  _  |  {  |  }  |  :  |      |
            // |      |     |  ~  |  -  |  +  |     |   |  \  |  =  |  <  |  >  |  ?  |      |
            //                    |     |     |     |   |     |  SPACE   |     |

            bindings = <
&none  &kp SQT   &kp PIPE   &kp EXCL   &kp DQT    &kp GRAVE    &kp CARET  &kp LBKT   &kp LPAR  &kp RPAR  &kp RBKT   &none
&none  &kp HASH  &kp AT     &kp AMPS   &kp ASTRK  &kp DLLR     &kp PRCNT  &kp UNDER  &kp LBRC  &kp RBRC  &kp COLON  &none
&none  &none     &kp TILDE  &kp MINUS  &kp PLUS   &none        &kp BSLH   &kp EQUAL  &kp LT    &kp GT    &kp QMARK  &none
                            &none      &trans     &none        &none      &kp SPACE  &none
            >;
        };

        nav_layer {
            bindings = <
&none  &kp N1   &kp N2     &kp N3     &kp N4      &kp N5    &kp N6    &kp N7         &kp N8   &kp N9     &kp N0         &none
&none  &kp TAB  &none      &kp LCTRL  &kp LSHIFT  &none     &kp LEFT  &kp DOWN       &kp UP   &kp RIGHT  &kp PAGE_UP    &none
&none  &none    &kp LC(X)  &kp LC(C)  &kp LC(V)   &none     &kp HOME  &kp BACKSPACE  &kp DEL  &kp END    &kp PAGE_DOWN  &none
                           &none      &trans      &none     &none     &trans         &trans
            >;
        };

        fn_layer {
            // -----------------------------------------------------------------------------------------
            // |      |  F1  |  F2  |  F3  |  F4  |     |   |  PSCRN  |     |     |     |     |      |
            // |      |  F5  |  F6  |  F7  |  F8  |     |   |         |     |     |     |     |      |
            // |      |  F9  |  F10 |  F11 |  F12 |     |   |         |     |     |     |     |      |
            //                        |     |     |     |   |         |     |  |

            bindings = <
&none  &kp F1   &kp F2   &kp F3  &kp F4  &kp F5    &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &none
&none  &kp F11  &kp F12  &none   &none   &none     &none   &none   &none   &none   &none    &none
&none  &none    &none    &none   &none   &none     &none   &none   &none   &none   &none    &none
                         &none   &trans  &none     &none   &none   &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        fn_layer_cond {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
