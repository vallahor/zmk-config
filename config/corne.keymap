/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

&sk {
    quick-release;
    release-after-ms = <300>;
};

/ {
    combos {
        compatible = "zmk,combos";

        esc_combo {
            bindings = <&kp ESCAPE>;
            key-positions = <19 20>;
            layers = <0>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <21 20 19>;
            layers = <0>;
            timeout-ms = <120>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <16 15 14>;
            timeout-ms = <120>;
            layers = <0>;
        };

        semi {
            bindings = <&kp SEMI>;
            key-positions = <33 32>;
            layers = <0>;
        };
    };

    behaviors {
        tap_mod_left: tap_mod_left {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_MOD_LEFT";
            #binding-cells = <0>;
            bindings = <&sk LEFT_CONTROL>, <&mo 5>;

            tapping-term-ms = <250>;
        };

        tap_mod_right: tap_mod_right {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_MOD_RIGHT";
            #binding-cells = <0>;
            bindings = <&sk LEFT_SHIFT>, <&mo 6>;

            tapping-term-ms = <250>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
&none  &kp Q  &kp W  &kp E  &kp R      &kp T            &kp Y           &kp U  &kp I      &kp O    &kp P          &none
&none  &kp A  &kp S  &kp D  &kp F      &kp G            &kp H           &kp J  &kp K      &kp L    &kp BACKSPACE  &none
&none  &kp Z  &kp X  &kp C  &kp V      &kp B            &kp N           &kp M  &kp COMMA  &kp DOT  &kp SLASH      &none
                     &mo 3  &kp SPACE  &tap_mod_left    &tap_mod_right  &mo 1  &mo 2
            >;
        };

        sym_layer {
            bindings = <
&none  &kp SINGLE_QUOTE  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp DOUBLE_QUOTES  &kp GRAVE    &none            &kp PERCENT  &kp ASTERISK    &kp AMPERSAND     &kp UNDERSCORE  &none
&none  &kp AT_SIGN       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp EQUAL          &kp CARET    &kp EXCLAMATION  &kp HASH     &kp LEFT_BRACE  &kp RIGHT_BRACE   &kp COLON       &none
&none  &kp BACKSLASH     &kp MINUS             &kp PLUS               &kp DOLLAR         &none        &kp TILDE        &kp PIPE     &kp LESS_THAN   &kp GREATER_THAN  &kp QUESTION    &none
                                               &lt 2 ENTER            &trans             &trans       &trans           &trans       &trans
            >;
        };

        nav_layer {
            bindings = <
&none  &kp ESCAPE    &none         &none             &kp TAB         &none     &kp PAGE_UP    &kp HOME        &kp UP_ARROW    &kp END          &kp LC(BACKSPACE)  &none
&none  &kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &none     &kp PAGE_DOWN  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp TAB            &none
&none  &kp LC(Z)     &kp LC(X)     &kp LC(C)         &kp LC(V)       &none     &none          &kp BACKSPACE   &kp ENTER       &kp DELETE       &kp LC(DELETE)     &none
                                   &trans            &trans          &trans    &trans         &trans          &trans
            >;
        };

        num_layer {
            bindings = <
&none  &kp ESCAPE    &none         &none             &kp TAB         &none        &kp PLUS   &kp N7  &kp N8  &kp N9  &kp ASTERISK  &none
&none  &kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &kp SPACE    &kp MINUS  &kp N4  &kp N5  &kp N6  &kp N0        &none
&none  &kp LC(Z)     &kp LC(X)     &kp LC(C)         &kp LC(V)       &none        &kp CARET  &kp N1  &kp N2  &kp N3  &kp SLASH     &none
                                   &trans            &trans          &trans       &trans     &trans  &trans
            >;
        };

        fn_layer {
            bindings = <
&none  &none         &none         &none             &none           &none         &none   &kp F7  &kp F8  &kp F9  &kp F12  &none
&none  &kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &kp ESCAPE    &none   &kp F4  &kp F5  &kp F6  &kp F10  &none
&none  &kp LC(Z)     &kp LC(X)     &kp LC(C)         &kp LC(V)       &none         &none   &kp F1  &kp F2  &kp F3  &kp F11  &none
                                   &trans            &trans          &trans        &trans  &trans  &trans
            >;
        };

        action_left {
            bindings = <
&trans  &trans        &trans        &trans            &kp LS(TAB)     &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp TAB         &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans            &kp LEFT_SHIFT  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                    &trans            &trans          &trans    &trans  &trans  &trans
            >;
        };

        action_right {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp LS(TAB)     &trans            &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp TAB         &kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_GUI  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp LEFT_SHIFT  &trans            &trans        &trans        &trans
                        &trans  &trans  &trans    &trans  &trans          &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        fn_layer_cond {
            if-layers = <2 3>;
            then-layer = <4>;
        };
    };
};
