/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESC>;
            key-positions = <19 20>;
            timeout-ms = <150>;
            layers = <0>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <20 21>;
            timeout-ms = <75>;
            layers = <0>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <14 15>;
            timeout-ms = <125>;
            layers = <0>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <31 32>;
            timeout-ms = <200>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
&none  &kp Q  &kp W  &kp E         &kp R        &kp T         &kp Y                   &kp U  &kp I         &kp O    &kp P      &none
&none  &kp A  &kp S  &kp D         &kp F        &kp G         &kp H                   &kp J  &kp K         &kp L    &kp SEMI   &none
&none  &kp Z  &kp X  &kp C         &kp V        &kp B         &kp N                   &kp M  &kp COMMA     &kp DOT  &kp SLASH  &none
                     &kp LEFT_ALT  &lt 2 SPACE  &kp LSHIFT    &mt LEFT_CONTROL ENTER  &mo 1  &kp LEFT_GUI
            >;
        };

        sym_layer {
            bindings = <
&none  &kp EXCLAMATION  &kp AT_SIGN       &kp AMPERSAND      &kp ASTERISK  &kp DOLLAR          &kp GRAVE      &kp DOUBLE_QUOTES  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PERCENT   &none
&none  &kp HASH         &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp EQUAL     &kp SINGLE_QUOTE    &none          &kp UNDERSCORE     &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp COLON     &none
&none  &kp CARET        &kp TILDE         &kp MINUS          &kp PLUS      &none               &kp BACKSLASH  &kp PIPE           &kp LESS_THAN         &kp GREATER_THAN       &kp QUESTION  &none
                                          &trans             &trans        &trans              &none          &trans             &none
            >;
        };

        nav_layer {
            bindings = <
&none  &kp N1     &kp N2        &kp N3            &kp N4          &kp N5    &kp N6    &kp N7         &kp N8   &kp N9     &kp N0     &none
&none  &kp TAB    &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &none     &kp LEFT  &kp DOWN       &kp UP   &kp RIGHT  &kp ENTER  &none
&none  &kp LC(Z)  &kp LC(X)     &kp LC(C)         &kp LC(V)       &none     &kp HOME  &kp BACKSPACE  &kp DEL  &kp END    &none      &none
                                &none             &trans          &none     &none     &trans         &trans
            >;
        };

        fn_layer {
            bindings = <
&none  &kp F1   &kp F2   &kp F3  &kp F4           &kp F5    &kp F6          &kp F7             &kp F8            &kp F9      &kp F10  &none
&none  &kp F11  &kp F12  &none   &kp PRINTSCREEN  &none     &kp C_PREVIOUS  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP   &kp C_NEXT  &none    &none
&none  &none    &none    &none   &none            &none     &none           &kp C_MUTE         &kp C_PLAY_PAUSE  &none       &none    &none
                         &none   &none            &none     &none           &none              &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        fn_layer_cond {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
