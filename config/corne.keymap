/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

&lt {
    flavor = "balanced";
    tapping-term-ms = <175>;
};

/ {
    behaviors {
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <150>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <75>;
            bindings = <&kp>, <&kp>;

            label = "HMR";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <150>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <75>;
            bindings = <&kp>, <&kp>;

            label = "HML";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35>;
        };

        enter_gui: enter_gui {
            compatible = "zmk,behavior-hold-tap";
            label = "ENTER_GUI";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "tap-preferred";
            quick-tap-ms = <250>;
        };
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
&none  &kp Q  &kp W  &kp E             &kp R        &kp T             &kp Y          &kp U  &kp I                      &kp O    &kp P      &none
&none  &kp A  &kp S  &kp D             &kp F        &kp G             &kp H          &kp J  &kp K                      &kp L    &kp SEMI   &none
&none  &kp Z  &kp X  &kp C             &kp V        &kp B             &kp N          &kp M  &kp COMMA                  &kp DOT  &kp SLASH  &none
                     &kp LEFT_CONTROL  &lt 2 SPACE  &kp LEFT_SHIFT    &kp BACKSPACE  &mo 1  &enter_gui LEFT_GUI ENTER
            >;
        };

        sym_layer {
            bindings = <
&none  &kp EXCLAMATION  &kp AT_SIGN       &kp AMPERSAND      &kp ASTERISK  &kp CARET           &kp GRAVE      &kp DOUBLE_QUOTES  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PERCENT   &none
&none  &kp HASH         &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp EQUAL     &kp SINGLE_QUOTE    &none          &kp UNDERSCORE     &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp COLON     &none
&none  &kp TILDE        &kp MINUS         &kp PLUS           &kp DOLLAR    &none               &kp BACKSLASH  &kp PIPE           &kp LESS_THAN         &kp GREATER_THAN       &kp QUESTION  &none
                                          &trans             &trans        &trans              &trans         &trans             &trans
            >;
        };

        nav_layer {
            bindings = <
&none  &none                 &kp HOME      &kp UP            &kp END         &none        &kp BACKSPACE  &kp N7     &kp N8  &kp N9  &kp DELETE  &none
&none  &kp ESCAPE            &kp LEFT      &kp DOWN          &kp RIGHT       &kp SPACE    &none          &kp N4     &kp N5  &kp N6  &kp N0      &none
&none  &kp LS(LEFT_CONTROL)  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &none        &none       &kp N1     &kp N2  &kp N3  &trans      &none
                                           &trans            &trans          &trans       &trans         &lt 1 TAB  &trans
            >;
        };

        fn_layer {
            bindings = <
&none  &kp F1        &kp F2        &kp F3        &kp F4      &kp F5               &kp F6          &kp F7             &kp F8            &kp F9      &kp F10          &none
&none  &kp F11       &kp F12       &bt BT_PRV    &bt BT_NXT  &ext_power EP_TOG    &kp C_PREVIOUS  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP   &kp C_NEXT  &kp PRINTSCREEN  &none
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_CLR  &none                &none           &kp C_MUTE         &kp C_PLAY_PAUSE  &none       &none            &none
                                   &none         &none       &none                &none           &none              &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        fn_layer_cond {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
